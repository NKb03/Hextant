apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'application'
apply plugin: 'kotlin-kapt'
//apply plugin: 'com.github.nkb03.hextant-library'

version '1.0-SNAPSHOT'

javafx {
    version = '11.0.2'
    modules = ['javafx.controls']
}

dependencies {
    api 'org.jetbrains.kotlin:kotlin-reflect'
    api project(":hextant-cli")
    compileOnly project(":hextant-core")
    api project(":hextant-codegen")
    kapt project(":hextant-codegen")
}

kapt {
    useBuildCache = true
    annotationProcessors("hextant.codegen.MainProcessor")
}

jar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes 'Main-Class': 'hextant.main.Main'
    }
}

application {
    mainClassName = 'hextant.main.Main'
    applicationDefaultJvmArgs = ['--add-opens', 'java.base/jdk.internal.loader=ALL-UNNAMED']
}

run {
    classpath = sourceSets.main.compileClasspath + sourceSets.main.output
}

task('hextantPublish', type: Copy) {
    from jar.outputs.files
    into System.getProperty('user.home') + '/hextant/plugins'
    rename '(.+)', 'main.jar'
}

afterEvaluate {
    for (proj in [/*":hextant-expr", ":hextant-lisp", ":hextant-core:fatjar", ":blocky"*/]) {
        def task = project(proj).tasks.findByPath("$proj:hextantPublish")
        if (task == null) println("Task 'hextantPublish' not found for project $proj")
        else run.dependsOn(task)
    }
}

